// Code generated by MockGen. DO NOT EDIT.
// Source: coordinator/account_service.go

// Package mock_coordinator is a generated GoMock package.
package mytest_mock

import (
	model "mas/model"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockConsensusService is a mock of ConsensusService interface
type MockConsensusService struct {
	ctrl     *gomock.Controller
	recorder *MockConsensusServiceMockRecorder
}

// MockConsensusServiceMockRecorder is the mock recorder for MockConsensusService
type MockConsensusServiceMockRecorder struct {
	mock *MockConsensusService
}

// NewMockConsensusService creates a new mock instance
func NewMockConsensusService(ctrl *gomock.Controller) *MockConsensusService {
	mock := &MockConsensusService{ctrl: ctrl}
	mock.recorder = &MockConsensusServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockConsensusService) EXPECT() *MockConsensusServiceMockRecorder {
	return m.recorder
}

// MockAccountService is a mock of AccountService interface
type MockAccountService struct {
	ctrl     *gomock.Controller
	recorder *MockAccountServiceMockRecorder
}

// MockAccountServiceMockRecorder is the mock recorder for MockAccountService
type MockAccountServiceMockRecorder struct {
	mock *MockAccountService
}

// NewMockAccountService creates a new mock instance
func NewMockAccountService(ctrl *gomock.Controller) *MockAccountService {
	mock := &MockAccountService{ctrl: ctrl}
	mock.recorder = &MockAccountServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockAccountService) EXPECT() *MockAccountServiceMockRecorder {
	return m.recorder
}

// Start mocks base method
func (m *MockAccountService) Start() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Start")
}

// Start indicates an expected call of Start
func (mr *MockAccountServiceMockRecorder) Start() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockAccountService)(nil).Start))
}

// CreateAccount mocks base method
func (m *MockAccountService) CreateAccount(arg0 string, arg1 float64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateAccount", arg0, arg1)
	ret0, _ := ret[0].(string)
	return ret0
}

// CreateAccount indicates an expected call of CreateAccount
func (mr *MockAccountServiceMockRecorder) CreateAccount(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAccount", reflect.TypeOf((*MockAccountService)(nil).CreateAccount), arg0, arg1)
}

// ProcessPayment mocks base method
func (m *MockAccountService) ProcessPayment(arg0, arg1 string, arg2 float64) string {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ProcessPayment", arg0, arg1, arg2)
	ret0, _ := ret[0].(string)
	return ret0
}

// ProcessPayment indicates an expected call of ProcessPayment
func (mr *MockAccountServiceMockRecorder) ProcessPayment(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ProcessPayment", reflect.TypeOf((*MockAccountService)(nil).ProcessPayment), arg0, arg1, arg2)
}

// GetAccount mocks base method
func (m *MockAccountService) GetAccount(arg0 string) *model.AccountInfo {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAccount", arg0)
	ret0, _ := ret[0].(*model.AccountInfo)
	return ret0
}

// GetAccount indicates an expected call of GetAccount
func (mr *MockAccountServiceMockRecorder) GetAccount(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAccount", reflect.TypeOf((*MockAccountService)(nil).GetAccount), arg0)
}

// Propose mocks base method
func (m *MockAccountService) Propose(arg0 interface{}) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Propose", arg0)
}

// Propose indicates an expected call of Propose
func (mr *MockAccountServiceMockRecorder) Propose(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Propose", reflect.TypeOf((*MockAccountService)(nil).Propose), arg0)
}

// ReadCommits mocks base method
func (m *MockAccountService) ReadCommits(arg0 <-chan *string, arg1 <-chan error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReadCommits", arg0, arg1)
}

// ReadCommits indicates an expected call of ReadCommits
func (mr *MockAccountServiceMockRecorder) ReadCommits(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReadCommits", reflect.TypeOf((*MockAccountService)(nil).ReadCommits), arg0, arg1)
}
